#############################################################################
#
# Generic Makefile for C/C++ Program
#
# License: GPL (General Public License)
# Author:  whyglinux <whyglinux AT gmail DOT com>
# Date:    2006/03/04 (version 0.1)
#          2007/03/24 (version 0.2)
#          2007/04/09 (version 0.3)
#          2007/06/26 (version 0.4)
#          2008/04/05 (version 0.5)
#
#
# Make Target:
# ------------
# The Makefile provides the following targets to make:
#   $ make           compile and link
#   $ make NODEP=yes compile and link without generating dependencies
#   $ make objs      compile only (no linking)
#   $ make tags      create tags for Emacs editor
#   $ make ctags     create ctags for VI editor
#   $ make clean     clean objects and the executable file
#   $ make distclean clean objects, the executable and dependencies
#   $ make help      get the usage of the makefile
#
#===========================================================================

## Customizable Section: adapt those variables to suit your program.
##==========================================================================

# Cplex directories
CPXLDIR = /opt/ibm/ILOG/CPLEX_Studio1251/cplex/lib/x86-64_sles10_4.1/static_pic/
CPXIDIR = /opt/ibm/ILOG/CPLEX_Studio1251/cplex/include/ilcplex

# COIN-OR directories
OSIDIR = ~/Artur/coin-Osi/

# The pre-processor and compiler options.
MY_CFLAGS = -DCPX

# The linker options.
MY_LIBS   = -lOsi -lCoinUtils -lOsiCpx -lpthread -lcplex -L $(CPXLDIR) -L $(OSIDIR)lib -Wl,-rpath=$(OSIDIR)lib

# The pre-processor options used by the cpp (man cpp for more).
CPPFLAGS  = -Wall -I $(OSIDIR)include -I $(CPXIDIR) -I BB -I CutGen -I Master -I Pricing -I swtLP

# The options used in linking as well as in any direct use of ld.
LDFLAGS   =

# The directories in which source files reside.
# If not specified, only the current directory will be serached.
SRCDIRS   = .  BB  CutGen  Master  Pricing  swtLP

# The executable file name.
# If not specified, current directory name or `a.out' will be used.
#PROGRAM   = swtLP-BCP  swtLP-Root  swtLP-1LP-A  swtLP-1LP-B  swtLP-1LP-C  swtLP-1LP-D  SSTBH
PROGRAM   = swtLP-BCP

## Implicit Section: change the following only when necessary.
##==========================================================================

# The source file types (headers excluded).
# .c indicates C source files, and others C++ ones.
SRCEXTS = .c .C .cc .cpp .CPP .c++ .cxx .cp

# The header file types.
HDREXTS = .h .H .hh .hpp .HPP .h++ .hxx .hp

# The pre-processor and compiler options.
# Users can override those variables from the command line.
CFLAGS  = -g -O3
CXXFLAGS= -g -O3

# The C program compiler.
#CC     = gcc

# The C++ program compiler.
#CXX    = g++

# Un-comment the following line to compile C programs as C++ ones.
#CC     = $(CXX)

# The command used to delete file.
RM     = rm -rf

ETAGS = etags
ETAGSFLAGS =

CTAGS = ctags
CTAGSFLAGS =

## Stable Section: usually no need to be changed. But you can add more.
##==========================================================================
SHELL    = /bin/sh
EMPTY    =
SPACE    = $(EMPTY) $(EMPTY)
SOURCES  = $(foreach d,$(SRCDIRS),$(wildcard $(addprefix $(d)/*,$(SRCEXTS))))
HEADERS  = $(foreach d,$(SRCDIRS),$(wildcard $(addprefix $(d)/*,$(HDREXTS))))
SRC_CXX  = $(filter-out %.c,$(SOURCES))
OBJS     = $(addsuffix .o, $(basename $(SOURCES)))
OBJSBCP  = $(addprefix obj-BCP/, $(OBJS))
OBJSROOT = $(addprefix obj-Root/, $(OBJS))
OBJS1LPA = $(addprefix obj-1LP-A/, $(OBJS))
OBJS1LPB = $(addprefix obj-1LP-B/, $(OBJS))
OBJS1LPC = $(addprefix obj-1LP-C/, $(OBJS))
OBJS1LPD = $(addprefix obj-1LP-D/, $(OBJS))
#DIROBJS  = obj-BCP  obj-Root  obj-1LP-A  obj-1LP-B  obj-1LP-C  obj-1LP-D
DIROBJS  = obj-BCP
DEPS     = $(OBJS:.o=.d)

## Define some useful variables.
DEP_OPT = $(shell if `$(CC) --version | grep "GCC" >/dev/null`; then \
                  echo "-MM -MP"; else echo "-M"; fi )
DEPEND      = $(CC)  $(DEP_OPT)  $(MY_CFLAGS) $(CFLAGS) $(CPPFLAGS)
DEPEND.d    = $(subst -g ,,$(DEPEND))
COMPILE.c   = $(CC)  $(MY_CFLAGS) $(CFLAGS)   $(CPPFLAGS) -c
COMPILE.cxx = $(CXX) $(MY_CFLAGS) $(CXXFLAGS) $(CPPFLAGS) -c
LINK.c      = $(CC)  $(MY_CFLAGS) $(CFLAGS)   $(CPPFLAGS) $(LDFLAGS)
LINK.cxx    = $(CXX) $(MY_CFLAGS) $(CXXFLAGS) $(CPPFLAGS) $(LDFLAGS)

.PHONY: all objs tags ctags clean distclean help show

# Delete the default suffixes
.SUFFIXES:

all: $(DIROBJS)  $(PROGRAM)

# Rules for creating dependency files (.d).
#------------------------------------------

%.d:%.cpp
	@echo -n $(dir $<) > $@
	@$(DEPEND.d) $< >> $@

# Rules for generating object files (.o).
#----------------------------------------
objs:$(DIROBJS)  $(OBJSBCP)

obj-BCP:
	mkdir -p obj-BCP/BB
	mkdir -p obj-BCP/CutGen
	mkdir -p obj-BCP/Master
	mkdir -p obj-BCP/Pricing
	mkdir -p obj-BCP/swtLP

obj-BCP/%.o:%.cpp
	$(COMPILE.cxx) $< -o $@

obj-Root:
	mkdir -p obj-Root/BB
	mkdir -p obj-Root/CutGen
	mkdir -p obj-Root/Master
	mkdir -p obj-Root/Pricing
	mkdir -p obj-Root/swtLP

obj-Root/%.o:%.cpp
	$(COMPILE.cxx) -DROOT_ONLY $< -o $@

obj-1LP-A:
	mkdir -p obj-1LP-A/BB
	mkdir -p obj-1LP-A/CutGen
	mkdir -p obj-1LP-A/Master
	mkdir -p obj-1LP-A/Pricing
	mkdir -p obj-1LP-A/swtLP

obj-1LP-A/%.o:%.cpp
	$(COMPILE.cxx) -DROOT_ONLY -DNO_CUT -DNO_STABILIZATION -DNO_FIXING $< -o $@

obj-1LP-B:
	mkdir -p obj-1LP-B/BB
	mkdir -p obj-1LP-B/CutGen
	mkdir -p obj-1LP-B/Master
	mkdir -p obj-1LP-B/Pricing
	mkdir -p obj-1LP-B/swtLP

obj-1LP-B/%.o:%.cpp
	$(COMPILE.cxx) -DROOT_ONLY -DNO_CUT -DNO_FIXING $< -o $@

obj-1LP-C:
	mkdir -p obj-1LP-C/BB
	mkdir -p obj-1LP-C/CutGen
	mkdir -p obj-1LP-C/Master
	mkdir -p obj-1LP-C/Pricing
	mkdir -p obj-1LP-C/swtLP

obj-1LP-C/%.o:%.cpp
	$(COMPILE.cxx) -DROOT_ONLY -DNO_CUT -DNO_STABILIZATION $< -o $@

obj-1LP-D:
	mkdir -p obj-1LP-D/BB
	mkdir -p obj-1LP-D/CutGen
	mkdir -p obj-1LP-D/Master
	mkdir -p obj-1LP-D/Pricing
	mkdir -p obj-1LP-D/swtLP

obj-1LP-D/%.o:%.cpp
	$(COMPILE.cxx) -DROOT_ONLY -DNO_CUT $< -o $@

# Rules for generating the tags.
#-------------------------------------
tags: $(HEADERS) $(SOURCES)
	$(ETAGS) $(ETAGSFLAGS) $(HEADERS) $(SOURCES)

ctags: $(HEADERS) $(SOURCES)
	$(CTAGS) $(CTAGSFLAGS) $(HEADERS) $(SOURCES)

# Rules for generating the executable.
#-------------------------------------
swtLP-BCP: $(OBJSBCP)
	$(LINK.cxx) $(OBJSBCP) $(MY_LIBS) -o $@
	@echo Type ./$@ to execute the program.

ifndef NODEP
ifneq ($(DEPS),)
  sinclude $(DEPS)
endif
endif

swtLP-Root:$(OBJSROOT)
	$(LINK.cxx) $(OBJSROOT) $(MY_LIBS) -o $@
	@echo Type ./$@ to execute the program.

ifndef NODEP
ifneq ($(DEPS),)
  sinclude $(DEPS)
endif
endif

swtLP-1LP-A:$(OBJS1LPA)
	$(LINK.cxx) $(OBJS1LPA) $(MY_LIBS) -o $@
	@echo Type ./$@ to execute the program.

ifndef NODEP
ifneq ($(DEPS),)
  sinclude $(DEPS)
endif
endif

swtLP-1LP-B:$(OBJS1LPB)
	$(LINK.cxx) $(OBJS1LPB) $(MY_LIBS) -o $@
	@echo Type ./$@ to execute the program.

ifndef NODEP
ifneq ($(DEPS),)
  sinclude $(DEPS)
endif
endif

swtLP-1LP-C:$(OBJS1LPC)
	$(LINK.cxx) $(OBJS1LPC) $(MY_LIBS) -o $@
	@echo Type ./$@ to execute the program.

ifndef NODEP
ifneq ($(DEPS),)
  sinclude $(DEPS)
endif
endif

swtLP-1LP-D:$(OBJS1LPD)
	$(LINK.cxx) $(OBJS1LPD) $(MY_LIBS) -o $@
	@echo Type ./$@ to execute the program.

ifndef NODEP
ifneq ($(DEPS),)
  sinclude $(DEPS)
endif
endif

SSTBH: heuristic/SSTBH.cpp
	g++ -O3 -o SSTBH heuristic/SSTBH.cpp

clean:
	$(RM) $(DIROBJS) $(PROGRAM)

distclean: clean
	$(RM) $(DEPS) TAGS

# Show help.
help:
	@echo 'Generic Makefile for C/C++ Programs (gcmakefile) version 0.5'
	@echo 'Copyright (C) 2007, 2008 whyglinux <whyglinux@hotmail.com>'
	@echo
	@echo 'Usage: make [TARGET]'
	@echo 'TARGETS:'
	@echo '  all       (=make) compile and link.'
	@echo '  NODEP=yes make without generating dependencies.'
	@echo '  objs      compile only (no linking).'
	@echo '  tags      create tags for Emacs editor.'
	@echo '  ctags     create ctags for VI editor.'
	@echo '  clean     clean objects and the executable file.'
	@echo '  distclean clean objects, the executable and dependencies.'
	@echo '  show      show variables (for debug use only).'
	@echo '  help      print this message.'
	@echo
	@echo 'Report bugs to <whyglinux AT gmail DOT com>.'

# Show variables (for debug use only.)
show:
	@echo 'PROGRAM     :' $(PROGRAM)
	@echo 'SRCDIRS     :' $(SRCDIRS)
	@echo 'HEADERS     :' $(HEADERS)
	@echo 'SOURCES     :' $(SOURCES)
	@echo 'SRC_CXX     :' $(SRC_CXX)
	@echo 'OBJS        :' $(OBJS)
	@echo 'DEPS        :' $(DEPS)
	@echo 'DEPEND      :' $(DEPEND)
	@echo 'COMPILE.c   :' $(COMPILE.c)
	@echo 'COMPILE.cxx :' $(COMPILE.cxx)
	@echo 'link.c      :' $(LINK.c)
	@echo 'link.cxx    :' $(LINK.cxx)

## End of the Makefile ##  Suggestions are welcome  ## All rights reserved ##
#############################################################################
